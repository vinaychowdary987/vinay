{
	"name": "dataflow5",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText26",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable31",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable31",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable31",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable31",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "join1"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "derivedColumn3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customerid as integer,",
				"          Name as string,",
				"          salary as integer,",
				"          Address as string,",
				"          phonenumber as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          c_customerid as integer,",
				"          c_Name as string,",
				"          c_salary as integer,",
				"          c_Address as string,",
				"          c_phonenumber as integer,",
				"          c_hashkey as binary,",
				"          c_modifieddate as timestamp,",
				"          c_isactive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 derive(SRC_HASH = toBinary(md5(Address,phonenumber,salary)),",
				"          modifieddate = currentUTC(),",
				"          isactive = 1) ~> derivedColumn1",
				"source2 filter(c_isactive==1) ~> filter1",
				"derivedColumn1, filter1 exists(customerid == c_customerid,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"join1 derive(isactive = 0) ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(toString(SRC_HASH)!=toString(c_hashkey))) ~> alterRow1",
				"filter1, derivedColumn1 join(c_customerid == customerid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"derivedColumn3 alterRow(insertIf(toString(SRC_HASH)!=toString(c_hashkey))) ~> alterRow2",
				"join1 derive(HashMatch = toString(SRC_HASH)==toString(c_hashkey)) ~> derivedColumn3",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          c_customerid as integer,",
				"          c_Name as string,",
				"          c_salary as integer,",
				"          c_Address as string,",
				"          c_phonenumber as integer,",
				"          c_hashkey as binary,",
				"          c_modifieddate as timestamp,",
				"          c_isactive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          c_customerid = customerid,",
				"          c_Name = Name,",
				"          c_salary = salary,",
				"          c_Address = Address,",
				"          c_phonenumber = phonenumber,",
				"          c_hashkey = SRC_HASH,",
				"          c_modifieddate = modifieddate,",
				"          c_isactive = isactive",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          c_customerid as integer,",
				"          c_Name as string,",
				"          c_salary as integer,",
				"          c_Address as string,",
				"          c_phonenumber as integer,",
				"          c_hashkey as binary,",
				"          c_modifieddate as timestamp,",
				"          c_isactive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['c_customerid'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          c_customerid,",
				"          c_isactive = isactive",
				"     )) ~> sink2",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          c_customerid as integer,",
				"          c_Name as string,",
				"          c_salary as integer,",
				"          c_Address as string,",
				"          c_phonenumber as integer,",
				"          c_hashkey as binary,",
				"          c_modifieddate as timestamp,",
				"          c_isactive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          c_customerid = customerid,",
				"          c_Name = Name,",
				"          c_salary = salary,",
				"          c_Address = Address,",
				"          c_phonenumber = phonenumber,",
				"          c_hashkey = SRC_HASH,",
				"          c_modifieddate = modifieddate,",
				"          c_isactive = isactive",
				"     )) ~> sink3"
			]
		}
	}
}