{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "scd_src",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SCD_SINK",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable8",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable9",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "exists1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "exists2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customerid as integer,",
				"          Name as string,",
				"          {salary } as integer,",
				"          {city } as string,",
				"          phonenumber as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          customerid as integer,",
				"          Name as string,",
				"          salary as integer,",
				"          city as string,",
				"          phonenumber as long,",
				"          hashkey as binary,",
				"          isactive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 derive(SRC_HASH = toBinary(md5(phonenumber)),",
				"          ACTIVE = 1) ~> derivedColumn1",
				"source2 derive(SINK_HASH = toBinary(md5(phonenumber)),",
				"          ACTIVE1 = 0) ~> derivedColumn2",
				"derivedColumn1, derivedColumn2 exists(hex(SRC_HASH) == hex(SINK_HASH),",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"derivedColumn2 filter(isactive==1) ~> filter1",
				"filter1, derivedColumn1 exists(source1@customerid==source2@customerid&&\r",
				"SRC_HASH!=SINK_HASH,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2",
				"exists2 alterRow(updateIf(true())) ~> alterRow1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          customerid as integer,",
				"          Name as string,",
				"          salary as integer,",
				"          city as string,",
				"          phonenumber as long,",
				"          hashkey as binary,",
				"          isactive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          customerid,",
				"          Name,",
				"          salary = {salary },",
				"          city = {city },",
				"          phonenumber,",
				"          hashkey = SRC_HASH,",
				"          isactive = ACTIVE",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          customerid as integer,",
				"          Name as string,",
				"          salary as integer,",
				"          city as string,",
				"          phonenumber as long,",
				"          hashkey as binary,",
				"          isactive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['customerid'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          customerid,",
				"          Name,",
				"          salary,",
				"          city,",
				"          phonenumber,",
				"          hashkey = SINK_HASH,",
				"          isactive",
				"     )) ~> sink2"
			]
		}
	}
}